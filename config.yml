# Hardware settings for the Go-LEDS system.
Hardware:
  # Type of the LED strip. Supported values: "ws2801" or "apa102".
  LEDType: "ws2801"
  # SPI bus frequency in Hz. 2097152 is a common, stable value for Raspberry Pi.
  SPIFrequency: 2097152

  # Configuration for the LED display output.
  Display:
    # To counteract electrical noise that might corrupt the LED state, the system
    # can periodically force a full refresh of all LED strips. This ensures the
    # display remains stable. Set to 0 to disable.
    ForceUpdateDelay: 500ms
    # The total number of LEDs in the virtual, continuous strip that producers
    # operate on. This can be larger than the sum of physical LEDs to create
    # "invisible" gaps between segments.
    LedsTotal: 165
    # Provides a simple mechanism for color correction. The final color values sent
    # to the LEDs are multiplied by these factors. This is useful for balancing the
    # color temperature of your specific LED strips (e.g., reducing blue tones
    # to achieve a warmer white).
    ColorCorrection: [1, 0.175, 0.05]
    # For APA102-type LEDs, this sets a global brightness level (a 5-bit value, 0-31).
    APA102_Brightness: 31
    # Maps the virtual `LedsTotal` strip onto physical LED segments.
    # Segments can be organized into "groups".
    #
    # - Within a single group, segments cannot overlap.
    # - Use multiple groups if you need to map the same virtual LED to multiple
    #   physical locations (e.g., parallel strips on opposite walls).
    LedSegments:
      # A unique name for this group of segments.
      GroupA:
        - FirstLed: 0
          LastLed: 69
          # Maps to a device defined in `SpiMultiplexGPIO`.
          SpiMultiplex: L1
          # Set to true if the physical strip is wired in reverse.
          Reverse: false
        - FirstLed: 111
          LastLed: 164
          SpiMultiplex: L2
          Reverse: false
      # NOTE: This example "GroupB" is for demonstration. To use it on real
      # hardware, you must define the `SpiMultiplex` keys (XXX, YYY, ZZZ)
      # in the `SpiMultiplexGPIO` section below.
      # GroupB:
      #   - { FirstLed: 30, LastLed: 60, SpiMultiplex: XXX }
      #   - { FirstLed: 75, LastLed: 100, SpiMultiplex: YYY }
      #   - { FirstLed: 120, LastLed: 150, SpiMultiplex: ZZZ }

  # Configuration for the infrared (IR) sensors.
  Sensors:
    # Number of sensor readings to average together. Helps prevent false
    # triggers from random spikes.
    SmoothingSize: 3
    # The delay between sensor read cycles. A smaller value means more
    # frequent readings and faster response times.
    LoopDelay: 20ms
    # Configuration for each individual sensor.
    SensorCfg:
      # A unique name (UID) for the sensor. This UID is used to associate
      # the sensor with its corresponding SensorLedProducer instance.
      S0:
        # The position of the sensor on the virtual LED strip.
        LedIndex: 0
        # The SPI device (ADC) this sensor is connected to.
        SpiMultiplex: ADC1
        # The channel (0-7) on the ADC for this sensor.
        AdcChannel: 0
        # The value the sensor must exceed to register a trigger. This requires
        # tuning to be sensitive enough without picking up noise. Use the
        # `-show-sensors` flag to calibrate this value.
        TriggerValue: 130
      S1: { LedIndex: 69, SpiMultiplex: ADC1, AdcChannel: 7, TriggerValue: 130 }
      S2: { LedIndex: 111, SpiMultiplex: ADC2, AdcChannel: 0, TriggerValue: 180 }
      S3: { LedIndex: 164, SpiMultiplex: ADC2, AdcChannel: 5, TriggerValue: 150 }

  # Defines the GPIO pin settings required to activate a specific SPI device.
  # This is the core of the SPI multiplexing configuration.
  SpiMultiplexGPIO:
    # This key (e.g., "L1") is the `SpiMultiplex` name used above.
    L1:
      # GPIO pins that must be set LOW to select this device.
      Low: [17]
      # GPIO pins that must be set HIGH to select this device.
      High: [22,23,24]
    L2: { Low: [22], High: [17,23,24] }
    ADC1: { Low: [17,22,23], High: [24] }
    ADC2: { Low: [17,22,24], High: [23] }

# --- Producer Configurations ---
# Each section below configures a different type of light animation producer.

# SensorLED: The primary producer, creating a "grow-stay-shrink" effect
# that radiates from a triggered sensor. One instance is created per sensor.
SensorLED:
  Enabled: true
  # Delay between steps as the light expands outwards.
  RunUpDelay: 5ms
  # Delay between steps as the light contracts inwards.
  RunDownDelay: 20ms
  # Minimum time the strip stays fully lit after the last trigger.
  HoldTime: 10s
  # The color and intensity of the illuminated LEDs.
  LedRGB: [70, 70, 70]
  # "Latch Mode" can be triggered by holding a hand in front of a sensor.
  # This will turn on the entire strip with a brighter light for a longer duration.
  # Triggering it again while active will turn it off.
  LatchEnabled: true
  # The sensor must read above this value to be considered for latch mode.
  LatchTriggerValue: 512
  # How long the sensor must be held above the LatchTriggerValue to activate.
  LatchTriggerDelay: 3s
  # How long the strip stays lit in latch mode (if not toggled off early).
  LatchTime: 5m
  # The color and intensity of the light in latch mode.
  LatchLedRGB: [140, 140, 140]

# NightLED: Provides a continuous, gentle glow between sunset and sunrise.
NightLED:
  Enabled: true
  # Your geographical location, used to calculate sunset and sunrise times.
  Latitude: 49.014
  Longitude: 8.4043
  # An array of colors to display during the night. The total night duration
  # is divided evenly among the color entries. Repeating a color makes it
  # display for a proportionally longer time.
  LedRGB:
    - [1, 0, 0]
    - [1, 0, 0] # This red will show for 2/3 of the night.
    # Note: Blue value is high due to the strong ColorCorrection factor above.
    # 20 * 0.05 = 1, which is the minimum visible blue level in this setup.
    - [0, 0, 20]

# MultiBlobLED: A playful effect with colored blobs moving and bouncing along
# the strip. It automatically starts after a SensorLED cycle completes.
MultiBlobLED:
  Enabled: true
  # How long the effect runs before stopping.
  Duration: 120s
  # Delay between animation steps. Smaller values result in faster movement.
  Delay: 120ms
  # Configuration for each individual blob.
  BlobCfg:
    BlobRed:
      # Movement speed and direction (positive=right, negative=left).
      DeltaX: 0.3
      # Initial position on the virtual strip.
      X: 20
      # A factor influencing the blob's width (larger = wider).
      Width: 512
      # The color and intensity of the blob.
      LedRGB: [30, 0, 0]
    BlobGreen: { DeltaX: -0.5, X: 40, Width: 512, LedRGB: [0, 30, 0] }
    BlobBlue: { DeltaX: 0.4, X: 130, Width: 768, LedRGB: [0, 0, 40] }
    BlobRed2: { DeltaX: -0.2, X: 150, Width: 512, LedRGB: [30, 0, 0] }

# ClockLED: A simple producer that creates a clock-like effect, 
ClockLED:
  Enabled: true
  # Which LED to use as the "start" of the clock for the hours. (hour: 0 and minute: 0)
  StartLedHour: 0
  # Which LED to use as the "end" of the clock for the hours. (hour: 11 and minute: 59)
  EndLedHour: 69
  # Which LED to use as the "start" of the clock for the hours. (hour: 0 and minute: 0)
  StartLedMinute: 111
  # Which LED to use as the "end" of the clock for the hours. (hour: 11 and minute: 59)
  EndLedMinute: 164
  LedHour: [100, 0, 0]
  LedMinute: [100, 0, 0]

# AudioLED: A producer connecting to squeezelite and shows a VU meter
AudioLED:
  Enabled: true
  # Which LED to use as the "start" of the left channel VU meter.
  StartLedLeft: 69
  # Which LED to use as the "end" of the left VU meter.
  EndLedLeft: 0
  # Which LED to use as the "start" of the right channel VU meter.
  StartLedRight: 111
  # Which LED to use as the "end" of the right channel VU meter.
  EndLedRight: 164
  # A (sub-) string used to find the right audio device   
  Device: "squeezelite"
  LedGreen: [0, 100, 0]
  LedYellow: [50, 50, 0]
  LedRed: [100, 0, 0]
  SampleRate: 48000
  # How often to read out samples and update the LED strip
  UpdateFreq: 30ms
  FramesPerBuffer: 2048
  MinDB: -50.0
  MaxDB: -3.0

# CylonLED: A simple producer that creates a red "eye" moving back and forth,
# inspired by Battlestar Galactica's Cylons. A good starting point for
# creating your own custom producers.
CylonLED:
  Enabled: false
  # How long the effect runs before stopping.
  Duration: 30s
  # Delay between animation steps.
  Delay: 20ms
  # Distance (in LEDs) to move each step. Can be a float.
  Step: 1.7
  # The width of the moving "eye".
  Width: 7
  # The color of the eye.
  LedRGB: [75, 0, 0]

